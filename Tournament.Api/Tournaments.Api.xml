<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tournaments.Api</name>
    </assembly>
    <members>
        <member name="T:Tournaments.Api.Extensions.ApplicationBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder"/> interface,
            including methods to seed initial data into the database.
            </summary>
        </member>
        <member name="M:Tournaments.Api.Extensions.ApplicationBuilderExtensions.SeedDataAsync(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Runs asynchronous database seed operations during application startup.
            </summary>
            <param name="builder">The application builder instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous seed operation.</returns>
        </member>
        <member name="M:Tournaments.Api.Extensions.ApplicationBuilderExtensions.HealthChecksMiddlewareExtensions(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Provides extension methods for adding health check middleware to the application's request pipeline.
            In other words, registers the health check endpoint.
            </summary>
            <remarks>This middleware enables the application to expose a health check endpoint, which can be used to
            monitor the application's health status. By default, the health check endpoint is configured at the path
            "/health", "/health/live" or "/health/ready".
            Note: Health checks has no swagger integration by default. You need to add it manually if required.
            </remarks>
        </member>
        <member name="T:Tournaments.Api.Extensions.ExceptionMiddleware">
            <summary>
            Provides extension methods to configure global exception handling middleware
            for the web application pipeline.
            </summary>
        </member>
        <member name="M:Tournaments.Api.Extensions.ExceptionMiddleware.ConfigureExceptionHandler(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configures the global exception handler middleware to catch unhandled exceptions,
            map known exceptions to appropriate HTTP status codes, and return
            ProblemDetails-formatted JSON responses.
            </summary>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> instance to configure.</param>
        </member>
        <member name="M:Tournaments.Api.Extensions.ExceptionMiddleware.CreateProblemDetails(Microsoft.AspNetCore.Http.HttpContext,System.Exception,Microsoft.AspNetCore.Mvc.Infrastructure.ProblemDetailsFactory,Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance based on the exception type,
            setting the HTTP status code, title, detail message, and request path.
            Known exceptions like <see cref="T:Domain.Models.Exceptions.TournamentNotFoundException"/> return 404 responses.
            Unhandled exceptions return a generic 500 response with optional detailed messages
            in development environments.
            </summary>
            <param name="context">The current HTTP context.</param>
            <param name="error">The caught exception.</param>
            <param name="problemDetailsFactory">Factory to create ProblemDetails instances.</param>
            <param name="app">The <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> for environment info.</param>
            <returns>A configured <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance for the response.</returns>
        </member>
        <member name="T:Tournaments.Api.Extensions.ServiceExtensions">
            <summary>
            Contains extension methods for configuring repository services and enabling
            lazy loading support within the application's dependency injection container.
            </summary>
        </member>
        <member name="M:Tournaments.Api.Extensions.ServiceExtensions.ConfigureRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Extension method for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that registers the Unit of Work
            and repository services, including support for lazy loading of repositories.
            </summary>
            <param name="services">The service collection to which the repositories and Unit of Work are added.</param>
        </member>
        <member name="M:Tournaments.Api.Extensions.ServiceExtensions.ConfigureServiceLayerServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Extension method for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> that registers the core service layer dependencies,
            including the <see cref="T:Service.Contracts.IServiceManager"/> and individual services such as tournament, game, and authentication services.
            Also enables lazy loading for these services by registering <see cref="T:System.Lazy`1"/> wrappers,
            which defer instantiation until the service is actually needed.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which the services will be added.</param>
            <remarks>
            This configuration centralizes the service layer setup, ensuring that dependent components receive properly scoped instances,
            and improves performance and testability by deferring service instantiation with lazy loading.
            </remarks>
        </member>
        <member name="T:Tournaments.Api.Extensions.ServiceCollectionExtensions">
            <summary>
            Provides extension method to add lazy loading support for services.
            </summary>
        </member>
        <member name="M:Tournaments.Api.Extensions.ServiceCollectionExtensions.AddLazy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers a service to be resolved lazily using <see cref="T:System.Lazy`1"/>, 
            allowing deferred instantiation until the service is actually needed.
            </summary>
            <typeparam name="TService">The type of the service to be registered.</typeparam>
            <param name="services">The service collection to add the lazy registration to.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with the lazy service registration.</returns>
        </member>
        <member name="T:Tournaments.Api.Extensions.SwaggerServiceExtensions">
            <summary>
            Provides extension methods for configuring Swagger services, including automatic
            inclusion of XML documentation files from known projects into the Swagger UI.
            </summary>
            <remarks>
            This class centralizes Swagger configuration by including XML comments for multiple 
            assemblies, such as the API, shared DTOs, and presentation layer. It ensures that XML 
            documentation is only included if the corresponding files exist, avoiding runtime exceptions.
            </remarks>
        </member>
        <member name="M:Tournaments.Api.Extensions.SwaggerServiceExtensions.AddSwaggerXmlComments(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers and configures Swagger services, including automatic inclusion of XML documentation 
            files from a predefined list of project assemblies.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to which Swagger services will be added.</param>
            <returns>The updated <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> with Swagger services configured.</returns>
            <remarks>
            This method checks for the existence of XML files in the output directory before including them.
            This prevents runtime failures in environments where certain projects or XML files may not be present.
            </remarks>
        </member>
        <member name="T:Tournaments.Api.Extensions.HealthChecksExtensions">
            <summary>
            Provides extension methods for configuring health checks in the application.
            </summary>
            <remarks>
            This static class simplifies the registration of health check services in the application's
            dependency injection container. It supports both liveness and readiness checks, including
            SQL Server connectivity verification.
            </remarks>
        </member>
        <member name="M:Tournaments.Api.Extensions.HealthChecksExtensions.HealthChecksServiceExtensions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String)">
            <summary>
            Registers health check services in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>, including
            a liveness check and a SQL Server readiness check.
            </summary>
            <param name="services">The service collection to add health checks to.</param>
            <param name="contextDBConnection">The connection string used for SQL Server readiness checks.</param>
            <param name="urlToCheck"></param>
            <remarks>
            - Liveness check ("self") always reports healthy.
            - Readiness check verifies SQL Server connectivity using a simple query.
            This method ensures that health checks are tagged appropriately for liveness
            ("liveness") and readiness ("readiness") endpoints.
            </remarks>
        </member>
    </members>
</doc>
