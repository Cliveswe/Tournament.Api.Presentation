<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tournaments.Presentation</name>
    </assembly>
    <members>
        <member name="T:Tournaments.Presentation.Controllers.ApiControllerBase">
            <summary>
            Serves as a base API controller providing shared error-handling logic for derived controllers.
            Converts <see cref="T:Domain.Models.Responses.ApiBaseResponse"/> instances into standardized <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> results
            to ensure consistent error response formatting across the API.
            </summary>
            <remarks>
            Intended to be inherited by resource-specific API controllers (e.g., GameController, TournamentController).
            Helps centralize response shaping and improves maintainability by encapsulating reusable behavior.
            </remarks>
        </member>
        <member name="M:Tournaments.Presentation.Controllers.ApiControllerBase.CreateProblemResult(System.String,System.String,System.Int32,System.DateTime)">
            <summary>
            Constructs a <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> object with the given error metadata and a timestamp.
            </summary>
            <param name="title">A short, human-readable summary of the error.</param>
            <param name="detail">A more detailed explanation of the error.</param>
            <param name="statusCode">The HTTP status code associated with the error.</param>
            <param name="timestamp">The timestamp indicating when the error occurred.</param>
            <returns>A populated <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> instance.</returns>
        </member>
        <member name="M:Tournaments.Presentation.Controllers.ApiControllerBase.ProcessError(Domain.Models.Responses.ApiBaseResponse)">
            <summary>
            Converts an <see cref="T:Domain.Models.Responses.ApiBaseResponse"/> instance into a standardized <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> response,
            mapping specific subclasses to appropriate HTTP status codes and messages.
            </summary>
            <param name="baseResponse">The response object containing error details.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.ObjectResult"/> containing a structured <see cref="T:Microsoft.AspNetCore.Mvc.ProblemDetails"/> payload.</returns>
        </member>
        <member name="T:Tournaments.Presentation.Controllers.Games.GamesController">
            <summary>
            API controller for managing <see cref="T:Domain.Models.Entities.Game"/> entities associated with tournaments.
            </summary>
            <remarks>
            This controller provides endpoints to perform CRUD operations on games within specific tournaments:
            <list type="number">
            <item>Retrieves games by tournamentEntity ID or by game ID.</item>
            <item>Creates new games linked to tournaments, ensuring data validity and preventing duplicates.</item>
            <item>Updates or partially updates existing games with full validation and concurrency handling.</item>
            <item>Deletes games by their ID with appropriate validation and error handling.</item>
            <item>Utilizes AutoMapper to map between entity models and data transfer objects (DTOs).</item>
            <item>Implements the Unit of Work pattern to coordinate database operations through repositories.</item>
            <item>Validates that game times fall within the tournamentEntity’s start and end dates.</item>
            <item>Returns standard HTTP response codes such as 200 OK, 201 Created, 204 No Content, 
            400 Bad Request, 404 Not Found, 409 Conflict, and 500 Internal Server Error.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Tournaments.Presentation.Controllers.Games.GamesController.#ctor(Service.Contracts.IServiceManager)">
            <summary>
            API controller for managing <see cref="T:Domain.Models.Entities.Game"/> entities associated with tournaments.
            </summary>
            <remarks>
            This controller provides endpoints to perform CRUD operations on games within specific tournaments:
            <list type="number">
            <item>Retrieves games by tournamentEntity ID or by game ID.</item>
            <item>Creates new games linked to tournaments, ensuring data validity and preventing duplicates.</item>
            <item>Updates or partially updates existing games with full validation and concurrency handling.</item>
            <item>Deletes games by their ID with appropriate validation and error handling.</item>
            <item>Utilizes AutoMapper to map between entity models and data transfer objects (DTOs).</item>
            <item>Implements the Unit of Work pattern to coordinate database operations through repositories.</item>
            <item>Validates that game times fall within the tournamentEntity’s start and end dates.</item>
            <item>Returns standard HTTP response codes such as 200 OK, 201 Created, 204 No Content, 
            400 Bad Request, 404 Not Found, 409 Conflict, and 500 Internal Server Error.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Tournaments.Presentation.Controllers.Games.GamesController.GetTournamentGames(Tournaments.Shared.Request.TournamentRequestParameters,System.Int32)">
            <summary>
            Retrieves all games for a specific tournament.
            </summary>
            <param name="requestParameters">Pagination and filtering parameters for the request.</param>
            <param name="tournamentId">The ID of the tournament whose games are to be retrieved.</param>
            <returns>
            A 200 OK response containing a list of games for the specified tournament, along with pagination metadata in the <c>X-Pagination</c> header.
            Returns 400 Bad Request if the tournament ID is invalid, or 404 Not Found if the tournament does not exist.
            </returns>
            <remarks>
            Sample request:
            GET /api/tournamentDetails/{tournamentId}/
            </remarks>
        </member>
    </members>
</doc>
